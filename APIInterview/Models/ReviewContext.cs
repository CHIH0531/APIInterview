// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace APIInterview.Models;

public partial class ReviewContext : DbContext
{
    public ReviewContext(DbContextOptions<ReviewContext> options)
        : base(options)
    {
    }

    public virtual DbSet<TArticle> TArticles { get; set; }

    public virtual DbSet<TCategory> TCategories { get; set; }

    public virtual DbSet<TMember> TMembers { get; set; }

    public virtual DbSet<TMessage> TMessages { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<TArticle>(entity =>
        {
            entity.HasKey(e => e.FArticleId);

            entity.ToTable("tArticle");

            entity.Property(e => e.FArticleId).HasColumnName("fArticleID");
            entity.Property(e => e.FArticleContent)
                .IsRequired()
                .HasColumnName("fArticleContent");
            entity.Property(e => e.FArticleName)
                .IsRequired()
                .HasColumnName("fArticleName");
            entity.Property(e => e.FCategoryNumber).HasColumnName("fCategoryNumber");
            entity.Property(e => e.FCreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("fCreatedAt");
            entity.Property(e => e.FMemberId).HasColumnName("fMemberID");
            entity.Property(e => e.FUpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("fUpdatedAt");

            entity.HasOne(d => d.FCategoryNumberNavigation).WithMany(p => p.TArticles)
                .HasForeignKey(d => d.FCategoryNumber)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tArticle_tCategory");

            entity.HasOne(d => d.FMember).WithMany(p => p.TArticles)
                .HasForeignKey(d => d.FMemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tArticle_tMember");
        });

        modelBuilder.Entity<TCategory>(entity =>
        {
            entity.HasKey(e => e.FCategoryNumber);

            entity.ToTable("tCategory");

            entity.Property(e => e.FCategoryNumber).HasColumnName("fCategoryNumber");
            entity.Property(e => e.FCategoryName)
                .HasMaxLength(50)
                .HasColumnName("fCategoryName");
        });

        modelBuilder.Entity<TMember>(entity =>
        {
            entity.HasKey(e => e.FMemberId);

            entity.ToTable("tMember");

            entity.Property(e => e.FMemberId).HasColumnName("fMemberID");
            entity.Property(e => e.FAddress)
                .HasMaxLength(50)
                .HasColumnName("fAddress");
            entity.Property(e => e.FEmail)
                .HasMaxLength(50)
                .HasColumnName("fEmail");
            entity.Property(e => e.FName)
                .HasMaxLength(50)
                .HasColumnName("fName");
            entity.Property(e => e.FPassword)
                .HasMaxLength(50)
                .HasColumnName("fPassword");
            entity.Property(e => e.FPhone)
                .HasMaxLength(50)
                .HasColumnName("fPhone");
        });

        modelBuilder.Entity<TMessage>(entity =>
        {
            entity.HasKey(e => e.FMessageId);

            entity.ToTable("tMessage");

            entity.Property(e => e.FMessageId).HasColumnName("fMessageID");
            entity.Property(e => e.FArticleId).HasColumnName("fArticleID");
            entity.Property(e => e.FCreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("fCreatedAt");
            entity.Property(e => e.FMemberId).HasColumnName("fMemberID");
            entity.Property(e => e.FMessageContent)
                .IsRequired()
                .HasColumnName("fMessageContent");
            entity.Property(e => e.FUpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("fUpdatedAt");

            entity.HasOne(d => d.FArticle).WithMany(p => p.TMessages)
                .HasForeignKey(d => d.FArticleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tMessage_tArticle");

            entity.HasOne(d => d.FMember).WithMany(p => p.TMessages)
                .HasForeignKey(d => d.FMemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tMessage_tMember");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}